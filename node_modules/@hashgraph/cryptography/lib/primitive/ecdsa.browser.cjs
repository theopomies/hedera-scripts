"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = generate;
exports.generateAsync = generateAsync;
exports.fromBytes = fromBytes;
exports.sign = sign;
exports.verify = verify;

var _BadKeyError = _interopRequireDefault(require("../BadKeyError.cjs"));

var secp256k1 = _interopRequireWildcard(require("secp256k1"));

var _keccak = _interopRequireDefault(require("keccak"));

var random = _interopRequireWildcard(require("./random.cjs"));

var hex = _interopRequireWildcard(require("../encoding/hex.cjs"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {import("../EcdsaPrivateKey.js").KeyPair} KeyPair
 */

/**
 * @returns {KeyPair}
 */
function generate() {
  while (true) {
    const privateKey = random.bytes(32);

    if (!secp256k1.privateKeyVerify(privateKey)) {
      continue;
    }

    const publicKey = secp256k1.publicKeyCreate(privateKey);
    return {
      privateKey,
      publicKey
    };
  }
}
/**
 * @returns {Promise<KeyPair>}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


async function generateAsync() {
  while (true) {
    const privateKey = await random.bytesAsync(32);

    if (!secp256k1.privateKeyVerify(privateKey)) {
      continue;
    }

    const publicKey = secp256k1.publicKeyCreate(privateKey);
    return {
      privateKey,
      publicKey
    };
  }
}
/**
 * @param {Uint8Array} data
 * @returns {KeyPair}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function fromBytes(data) {
  if (!secp256k1.privateKeyVerify(data)) {
    throw new _BadKeyError.default("invalid private key bytes");
  }

  const publicKey = secp256k1.publicKeyCreate(data);
  return {
    privateKey: data,
    publicKey
  };
}
/**
 * @param {Uint8Array} keydata
 * @param {Uint8Array} message
 * @returns {Uint8Array}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function sign(keydata, message) {
  const data = (0, _keccak.default)("keccak256").update(hex.encode(message)).digest();
  return secp256k1.ecdsaSign(data, keydata).signature;
}
/**
 * @param {Uint8Array} keydata
 * @param {Uint8Array} message
 * @param {Uint8Array} signature
 * @returns {boolean}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function verify(keydata, message, signature) {
  const data = (0, _keccak.default)("keccak256").update(hex.encode(message)).digest();
  return secp256k1.ecdsaVerify(signature, data, keydata);
}